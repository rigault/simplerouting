#!/bin/bash

# Param√®tre : d√©lai en heures (doit √™tre un multiple de 6 pour suivre les runs GFS)
DELAY=4

# Valeurs par d√©faut des coordonn√©es
TOP_LAT=53
LEFT_LON=-26
BOTTOM_LAT=36
RIGHT_LON=16

# Nom de base des fichiers
ROOT="R3_NOOA_Inter"

rm -f grib/$ROOT*

# Si l'utilisateur passe 4 arguments, les utiliser √† la place des valeurs par d√©faut
if [ $# -eq 4 ]; then
    TOP_LAT=$1
    LEFT_LON=$2
    BOTTOM_LAT=$3
    RIGHT_LON=$4
    echo "üåç Zone d√©finie par l'utilisateur : TOP_LAT=$TOP_LAT, LEFT_LON=$LEFT_LON, BOTTOM_LAT=$BOTTOM_LAT, RIGHT_LON=$RIGHT_LON"
else
    echo "üåç Utilisation des valeurs par d√©faut : TOP_LAT=$TOP_LAT, LEFT_LON=$LEFT_LON, BOTTOM_LAT=$BOTTOM_LAT, RIGHT_LON=$RIGHT_LON"
fi

# Dossier de destination
mkdir -p grib

# R√©cup√©ration de l'heure UTC actuelle et ajustement avec le d√©lai
now=$(date -u +"%Y%m%d %H")
YYYYMMDD=$(echo "$now" | cut -d' ' -f1)
hour=$(echo "$now" | cut -d' ' -f2)

# Convertir `hour` en base 10 pour √©viter l'erreur octale
hour=$((10#$hour - DELAY))
if [ "$hour" -lt 0 ]; then
    YYYYMMDD=$(date -u -d "$YYYYMMDD -1 day" +"%Y%m%d")
    hour=$((hour + 24))
fi

# Trouver le dernier run GFS valide (00, 06, 12, 18)
hour=$((hour / 6 * 6))

# Formater HH sur 2 chiffres correctement
HH=$(printf "%02d" "$hour")

echo "üìÖ Run GFS s√©lectionn√© : $YYYYMMDD/$HH (d√©calage de $DELAY heures)"

# URL de base avec variables dynamiques
base_url="https://nomads.ncep.noaa.gov/cgi-bin/filter_gfs_0p25.pl?dir=/gfs.${YYYYMMDD}/${HH}/atmos&file=gfs.t${HH}z.pgrb2.0p25.f"

# Param√®tres de la r√©gion
region_params="&subregion=&toplat=$TOP_LAT&leftlon=$LEFT_LON&rightlon=$RIGHT_LON&bottomlat=$BOTTOM_LAT"

# Flag pour v√©rifier si la premi√®re boucle a √©t√© parcourue enti√®rement
first_loop_completed=true

# Premi√®re boucle : step de 000 √† 120 (pas de 1)
for step in $(seq -w 0 120); do
    file_url="${base_url}${step}&var_GUST=on&var_PRMSL=on&var_PRATE=on&var_UGRD=on&var_VGRD=on&lev_10_m_above_ground=on&lev_surface=on&lev_mean_sea_level=on${region_params}"
    output_file="grib/${ROOT}${step}.grb"
    
    echo "üì• T√©l√©chargement de $output_file..."
    curl -s -o "$output_file" "$file_url"
    
    if [ $? -ne 0 ] || [ ! -s "$output_file" ]; then
        echo "‚ö†Ô∏è √âchec du t√©l√©chargement de $output_file, arr√™t des t√©l√©chargements."
        first_loop_completed=false
        break
    fi
done

# Si la premi√®re boucle n'a pas √©t√© compl√©t√©e, on ne fait pas la deuxi√®me
if [ "$first_loop_completed" = true ]; then
   # Deuxi√®me boucle : step de 123 √† 384 (pas de 3)
   for step in $(seq -w 123 3 384); do
      file_url="${base_url}${step}&var_GUST=on&var_PRMSL=on&var_PRATE=on&var_UGRD=on&var_VGRD=on&lev_10_m_above_ground=on&lev_surface=on&lev_mean_sea_level=on${region_params}"
      output_file="grib/${ROOT}${step}.grb"
    
      echo "üì• T√©l√©chargement de $output_file..."
      curl -s -o "$output_file" "$file_url"
    
      if [ $? -ne 0 ] || [ ! -s "$output_file" ]; then
           echo "‚ö†Ô∏è √âchec du t√©l√©chargement de $output_file, arr√™t des t√©l√©chargements."
         break
      fi
   done
fi

# Concat√©nation des fichiers en un seul
echo "üîÑ Concat√©nation des fichiers en ${ROOT}_BIG.grb..."
cat grib/${ROOT}*.grb > grib/R3_NOAA_BIG.grb

echo "‚úÖ T√©l√©chargements et concat√©nation termin√©s."

