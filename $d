function polarInfo() {
    const formData = "type=4&polar=pol/first260.pol";

    fetch(apiUrl, {
        method: "POST",
        headers: {
            "Content-Type": "application/x-www-form-urlencoded"
        },
        body: formData
    })
    .then(response => response.ok ? response.json() : Promise.reject(`Erreur ${response.status}: ${response.statusText}`))
    .then(data => generatePolarPlotly(data))
    .catch(error => {
        Swal.fire({
            title: "Erreur",
            text: error,
            icon: "error",
            confirmButtonColor: "#FFA500",
            confirmButtonText: "OK"
        });
    });
}

function generatePolarPlotly(data) {
    if (!data.array || !Array.isArray(data.array) || data.array.length < 2) return;

    const windSpeeds = data.array[0].slice(1).map(v => parseFloat(v)).filter(v => !isNaN(v));
    const twaValues = data.array.slice(1).map(row => parseFloat(row[0])).filter(v => !isNaN(v));
    let maxTWS = Math.ceil(windSpeeds[windSpeeds.length - 1] * 1.1);

    let initialTWS = windSpeeds.includes(15) ? 15 : windSpeeds[0]; // Prend 15 kn si dispo, sinon premier TWS

    const chartContainer = document.createElement("div");
    chartContainer.innerHTML = `
        <label for="windSpeed">Vitesse du vent (TWS) :</label>
        <input type="range" id="windSpeedSlider" min="${windSpeeds[0]}" max="${maxTWS}" step="0.1" value="${initialTWS}">
        <span id="windSpeedValue">${initialTWS} kn</span>
        <div id="polarPlotly" style="width: 100%; height: 400px;"></div>
        <p><strong>Vitesse max:</strong> <span id="maxSpeed">-</span> kn</p>
        <p><strong>VMG au près:</strong> <span id="bestVmg">-</span> kn à <span id="bestVmgAngle">-</span>°</p>
        <p><strong>VMG au portant:</strong> <span id="bestVmgBack">-</span> kn à <span id="bestVmgBackAngle">-</span>°</p>
        <button id="showTable" style="margin-top: 10px; padding: 5px 10px; background-color: #FFA500; color: white; border: none; cursor: pointer;">
            Afficher le tableau
        </button>
    `;

    Swal.fire({ title: "Graphique polaire", html: chartContainer, width: "60%", showConfirmButton: false });

    function updatePlot(tws) {
        document.getElementById("windSpeedValue").innerText = `${tws.toFixed(1)} kn`;

        let speeds = interpolateSpeeds(tws, windSpeeds, data);
        let { fullTwa, fullSpeeds } = symmetrizeData(twaValues, speeds);

        let maxSpeed = findMaxSpeed(fullSpeeds);
        let vmg = bestVmg(fullTwa, fullSpeeds);
        let vmgBack = bestVmgBack(fullTwa, fullSpeeds);

        document.getElementById("maxSpeed").innerText = maxSpeed.toFixed(2);
        document.getElementById("bestVmg").innerText = vmg.speed.toFixed(2);
        document.getElementById("bestVmgAngle").innerText = vmg.angle.toFixed(0);
        document.getElementById("bestVmgBack").innerText = vmgBack.speed.toFixed(2);
        document.getElementById("bestVmgBackAngle").innerText = vmgBack.angle.toFixed(0);

        const trace = {
            type: "scatterpolar",
            mode: "lines+markers",
            r: fullSpeeds,
            theta: fullTwa,
            name: `Vitesse bateau (kn) pour TWS ${tws.toFixed(1)} kn`,
            line: { color: "orange" }
        };

        const layout = {
            polar: {
                radialaxis: { visible: true, range: [0, maxSpeed || 1] },
                angularaxis: { direction: "clockwise", rotation: 90 }
            },
            showlegend: false
        };

        Plotly.newPlot("polarPlotly", [trace], layout);
    }

    document.getElementById("windSpeedSlider").addEventListener("input", function() {
        updatePlot(parseFloat(this.value));
    });

    document.getElementById("showTable").addEventListener("click", function() {
        showPolarTable(data);
    });

    updatePlot(initialTWS);
}

function showPolarTable(data) {
    let windSpeeds = data.array[0].slice(1).map(v => parseFloat(v)).filter(v => !isNaN(v));
    let twaValues = data.array.slice(1).map(row => parseFloat(row[0])).filter(v => !isNaN(v));

    let tableHTML = "<table border='1' style='border-collapse: collapse; width: 100%; text-align: center;'>";
    tableHTML += "<tr style='font-weight: bold; background-color: #FFA500; color: white;'><th>TWA / TWS</th>";

    windSpeeds.forEach(tws => {
        tableHTML += `<th>${tws} kn</th>`;
    });

    tableHTML += "</tr>";

    data.array.slice(1).forEach(row => {
        tableHTML += `<tr><td style='font-weight: bold; background-color: #f0f0f0;'>${row[0]}°</td>`;
        row.slice(1).forEach(value => {
            tableHTML += `<td>${value.toFixed(2)}</td>`;
        });
        tableHTML += "</tr>";
    });

    tableHTML += "</table>";

    Swal.fire({
        title: "Tableau des vitesses",
        html: tableHTML,
        width: "80%",
        confirmButtonColor: "#FFA500",
        confirmButtonText: "Fermer"
    });
}


